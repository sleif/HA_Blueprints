blueprint:
  name: sleif plant moisture notification
  description: "`- Version: 1.10 -`\n\nMonitors a moisture sensor. If the value
    is low (or sensor is unavailable), it turns on a status light and sends a
    notification. When moisture is OK again, it turns off the light."
  domain: automation
  input:
    moisture_sensor:
      name: Moisture Sensor
      selector:
        entity:
          domain: sensor
    status_light:
      name: Status Light
      selector:
        entity:
          domain: light
    notify_service:
      name: Notification Service
      selector:
        entity:
          domain: notify
    plant_name:
      name: Plant Name
      description: Used in the notification message
      default: "Plant"
      selector:
        text: {}
    moisture_minimum:
      name: Moisture warning threshold
      default: 30
      selector:
        number:
          min: 20
          max: 50
          step: 5
          unit_of_measurement: "%"

trigger:
  - platform: numeric_state
    entity_id: !input moisture_sensor
    below: 30
    for:
      seconds: 10

  - platform: numeric_state
    entity_id: !input moisture_sensor
    above: 30
    for:
      seconds: 10

  - platform: state
    entity_id: !input moisture_sensor
    to:
      - unavailable
      - unknown
    for:
      seconds: 10

  - platform: event
    event_type: automation_reloaded

variables:
  _moisture_sensor: !input moisture_sensor
  _plant_name: !input plant_name
  _moisture_minimum: !input moisture_minimum

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {% set value = states(_moisture_sensor) %}
              {{ value in ['unknown', 'unavailable']
                or (value | float(default=9999)) < _moisture_minimum }}
        sequence:
          - service: !input notify_service
            data:
              message: "{{ _plant_name }} needs watering! (Moisture below {{ _moisture_minimum }}%)"
          - service: light.turn_on
            target:
              entity_id: !input status_light
      - conditions:
          - condition: template
            value_template: >-
              {% set value = states(_moisture_sensor) %}
              {{ value == 'ok' or (value | float(default=9999)) >= _moisture_minimum }}
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input status_light
mode: single
